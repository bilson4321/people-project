{"version":3,"sources":["Component/PeopleDetail.js","Component/Header.js","App.js","serviceWorker.js","index.js"],"names":["PeopleDetail","props","className","Fragment","src","this","profile","profileImage","onClick","onclick","firstName","lastName","phone","email","address","city","state","country","zipCode","countryCode","streetAddress","closeFunction","console","log","React","Component","Header","App","closeDetail","setState","detail","people","fetch","then","response","json","map","value","key","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TA8CeA,G,wBA1Cb,WAAYC,GACT,qEACOA,I,sEAGT,IAAD,OAEE,OAEE,yBAAKC,UAAU,aAEX,kBAAC,IAAMC,SAAP,KACE,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,gBAAgBE,IAAKC,KAAKJ,MAAMK,QAAQC,eACvD,yBAAKL,UAAU,eAAeM,QAAS,kBAAI,EAAKC,YAAhD,MAEF,6BACE,4BAAI,uCACJ,0CACA,8BAAOJ,KAAKJ,MAAMK,QAAQI,UAA1B,KACA,8BAAOL,KAAKJ,MAAMK,QAAQK,UAAgB,6BAC1C,2CACA,8BAAON,KAAKJ,MAAMK,QAAQM,OAAa,6BACvC,2CACA,8BAAOP,KAAKJ,MAAMK,QAAQO,OAAa,6BACvC,6CACA,8BACGR,KAAKJ,MAAMK,QAAQQ,QAAQC,KAD9B,KACsCV,KAAKJ,MAAMK,QAAQQ,QAAQE,MADjE,KAC0EX,KAAKJ,MAAMK,QAAQQ,QAAQG,QADrG,IAC8G,6BAC3GZ,KAAKJ,MAAMK,QAAQQ,QAAQI,QAF9B,KAEyCb,KAAKJ,MAAMK,QAAQQ,QAAQK,YAFpE,KAEmFd,KAAKJ,MAAMK,QAAQQ,QAAQM,oB,gCAUxHf,KAAKJ,MAAMoB,gBACXC,QAAQC,IAAI,a,GAxCWC,IAAMC,YCalBC,G,kBAZb,WAAYzB,GACT,qEACOA,I,sEAKR,OACI,yBAAKC,UAAU,UAAS,2C,GATXsB,IAAMC,YC6DZE,E,YAzDb,aACG,IAAD,8BACE,+CAgDJC,YAAY,WAEV,EAAKC,SAAS,CAACC,QAAO,IACtB,EAAKD,SAAS,CAACvB,QAAQ,KACvBgB,QAAQC,IAAI,SAnDV,EAAKP,MAAM,CACTe,OAAO,GACPD,QAAO,EACPxB,QAAQ,IALZ,E,iFASD,IAAD,OACI0B,MAAM,iDACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAC,GAAQ,OAAE,EAAKL,SAAS,CAACE,OAAOG,S,+BAGzC,IAAD,OACE,OACE,kBAAC,IAAM/B,SAAP,KACE,kBAAC,EAAD,MACA,yBAAKD,UAAU,aAEbG,KAAKW,MAAMc,OACT,kBAAC,EAAD,CAAcxB,QAASD,KAAKW,MAAMV,QAASe,cAAehB,KAAKuB,cAE/D,4BACGvB,KAAKW,MAAMe,OAAOK,KAAI,SAACC,GAChB,OAAO,wBAAIC,IAAKD,EAAME,IACZ,yBAAKrC,UAAU,oBAAoBM,QAAS,kBAAI,EAAKC,QAAQ4B,EAAME,MACjE,yBAAKrC,UAAU,iBAAiBE,IAAKiC,EAAM9B,eAC3C,yBAAKL,UAAU,oBACZmC,EAAM3B,UACN,SACA2B,EAAM1B,oB,8BAWjC4B,GAENjB,QAAQC,IAAI,SAASgB,GACrBlC,KAAKwB,SAAS,CAACC,QAAO,IACtBzB,KAAKwB,SAAS,CAACvB,QAAQD,KAAKW,MAAMe,OAAOQ,EAAG,S,GAjD9Bf,IAAMC,WCMJe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.ff6074c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PeopleDetail.css';\r\n\r\nclass PeopleDetail extends React.Component{\r\n  constructor(props)\r\n    {\r\n      super(props);\r\n    }\r\n  render()\r\n  {\r\n    \r\n    return (\r\n      \r\n      <div className=\"container\">\r\n        {\r\n          <React.Fragment>\r\n            <div className=\"image-holder\">\r\n              <img className='profile-image' src={this.props.profile.profileImage}></img>\r\n              <div className=\"close-button\" onClick={()=>this.onclick()}>X</div>\r\n            </div>\r\n            <div>\r\n              <h2><u>Details</u></h2>\r\n              <label>Name : </label>\r\n              <span>{this.props.profile.firstName} </span>\r\n              <span>{this.props.profile.lastName}</span><br />\r\n              <label>Phone : </label>\r\n              <span>{this.props.profile.phone}</span><br />\r\n              <label>Email : </label>\r\n              <span>{this.props.profile.email}</span><br />\r\n              <label>Address : </label>\r\n              <span>\r\n                {this.props.profile.address.city}, {this.props.profile.address.state}, {this.props.profile.address.country} <br />\r\n                {this.props.profile.address.zipCode}, {this.props.profile.address.countryCode}, {this.props.profile.address.streetAddress}\r\n              </span>\r\n           </div>\r\n          </React.Fragment>\r\n        }\r\n      </div>\r\n      )\r\n  }\r\n  onclick()\r\n  {\r\n    this.props.closeFunction();\r\n    console.log(\"Close\");\r\n  }\r\n}\r\nexport default PeopleDetail;","import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component{\r\n  constructor(props)\r\n    {\r\n      super(props);\r\n    }\r\n  render()\r\n  {\r\n    \r\n    return (\r\n        <div className=\"header\"><h1>People</h1></div>\r\n      );\r\n  }\r\n}\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport PeopleDetail from './Component/PeopleDetail';\nimport Header from './Component/Header';\n\n\nclass App extends React.Component{\n  constructor()\n    {\n      super();\n      this.state={\n        people:[],\n        detail:false,\n        profile:{}\n      }\n    }\n  componentDidMount()\n  {\n      fetch(\"https://mock-io.herokuapp.com/users?_limit=10\")\n      .then(response=>response.json())\n      .then(response=>this.setState({people:response}))\n  }\n  render()\n  {\n    return (\n      <React.Fragment>\n        <Header />\n        <div className=\"container\">\n        {\n          this.state.detail?\n            <PeopleDetail profile={this.state.profile} closeFunction={this.closeDetail} />\n            :\n            <ul>\n              {this.state.people.map((value)=>{\n                      return <li key={value.id}>\n                                <div className='thumbnail-profile' onClick={()=>this.onclick(value.id)}>\n                                  <img className='thumbnail-icon' src={value.profileImage}></img>\n                                  <div className='name-placeholder'>\n                                    {value.firstName} \n                                    {\"      \"}\n                                    {value.lastName}\n                                  </div>\n                                </div>                \n                              </li>\n                      })}\n            </ul>\n        }\n      </div>\n      </React.Fragment>\n      )\n  }\n  onclick(id)\n  {\n    console.log(\"id of:\",id);\n    this.setState({detail:true}); \n    this.setState({profile:this.state.people[id-1]});\n  }\n  closeDetail=()=>\n  {\n    this.setState({detail:false});\n    this.setState({profile:{}});\n    console.log(\"stop\");\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}